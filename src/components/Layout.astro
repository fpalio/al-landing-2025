---
import '../style/global.css'
import LottieLogo from './LottieLogo.astro'
import LanguageSelector from './LanguageSelector.astro'
import { getLangFromUrl, useTranslations, languageConfig } from '../i18n/utils'

export interface Props {
	title: string;
	currentPage?: string;
}

const { title, currentPage = 'home' } = Astro.props as Props;
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const currentPath = Astro.url.pathname;
const basePath = currentPath.replace(/^\/[a-z]{2}(?=\/|$)/, '') || '/';
---

<!DOCTYPE html>
<html lang={lang}>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width">
  <link rel="icon" type="image/x-icon" href="/favicon.ico" />
	<title>{title}</title>
</head>
<body>
	<!-- NAVIGATION HEADER -->
	<nav id="site-nav" class="fixed top-0 right-0 left-0 z-[100] pt-2 bg-brand-blue">
		<div class="px-4 mx-auto max-w-7xl sm:px-6 lg:px-8">
			<div class="flex justify-between items-center h-16">
				<!-- Logo -->
				<div class="flex items-center">
					<a href="/" class="flex items-center">
						<LottieLogo width={180} height={90} className="flex-shrink-0" />
					</a>
				</div>
				
				<!-- Desktop Navigation -->
				<div class="hidden md:block">
					<div class="flex relative items-baseline md:ml-4 lg:ml-10 md:space-x-4 lg:space-x-8" id="desktop-nav">
						<!-- Animated underline -->
						<div id="nav-underline" class="absolute bottom-0 h-0.5 opacity-0 bg-brand-red" style="will-change: transform; transform-origin: left center;"></div>
						
							{currentPage === 'home' ? (
								<div class="flex flex-col items-center">
									<a href={lang === 'en' ? '/' : `/${lang}`} class="px-2 py-2 text-base font-bold whitespace-nowrap md:px-2 lg:px-3 md:text-base lg:text-lg text-brand-red nav-link active" data-page="home">{t('nav.home')}</a>
								</div>
							) : (
								<a href={lang === 'en' ? '/' : `/${lang}`} class="px-2 py-2 text-base font-bold whitespace-nowrap transition-colors duration-200 md:px-2 lg:px-3 md:text-base lg:text-lg text-white/80 hover:text-brand-red nav-link" data-page="home">{t('nav.home')}</a>
							)}
						
							{currentPage === 'about' ? (
								<div class="flex flex-col items-center">
									<a href={lang === 'en' ? '/about' : `/${lang}/about`} class="px-2 py-2 text-base font-bold whitespace-nowrap md:px-2 lg:px-3 md:text-base lg:text-lg text-brand-red nav-link active" data-page="about">{t('nav.about')}</a>
								</div>
							) : (
								<a href={lang === 'en' ? '/about' : `/${lang}/about`} class="px-2 py-2 text-base font-bold whitespace-nowrap transition-colors duration-200 md:px-2 lg:px-3 md:text-base lg:text-lg text-white/80 hover:text-brand-red nav-link" data-page="about">{t('nav.about')}</a>
							)}
						
							{currentPage === 'services' ? (
								<div class="flex flex-col items-center">
									<a href={lang === 'en' ? '/services' : `/${lang}/services`} class="px-2 py-2 text-base font-bold whitespace-nowrap md:px-2 lg:px-3 md:text-base lg:text-lg text-brand-red nav-link active" data-page="services">{t('nav.services')}</a>
								</div>
							) : (
								<a href={lang === 'en' ? '/services' : `/${lang}/services`} class="px-2 py-2 text-base font-bold whitespace-nowrap transition-colors duration-200 md:px-2 lg:px-3 md:text-base lg:text-lg text-white/80 hover:text-brand-red nav-link" data-page="services">{t('nav.services')}</a>
							)}
						
							{currentPage === 'contact' ? (
								<a href={lang === 'en' ? '/contact' : `/${lang}/contact`} id="contact-button-active" class="flex overflow-hidden relative items-center font-bold text-white whitespace-nowrap rounded-xl border-2 shadow-lg md:px-4 md:py-2 md:text-base lg:px-6 lg:py-3 lg:text-lg bg-brand-red border-white/20">
								<span class="flex relative z-10 items-center">
									{t('nav.contact')}
									<svg class="ml-2 w-5 h-5 transition-transform duration-200" fill="currentColor" viewBox="0 0 20 20">
										<path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
									</svg>
								</span>
							</a>
							) : (
								<a href={lang === 'en' ? '/contact' : `/${lang}/contact`} id="contact-button" class="flex overflow-hidden relative items-center font-bold text-white whitespace-nowrap rounded-xl border-2 border-transparent shadow-lg transition-all duration-200 transform md:px-4 md:py-2 md:text-base lg:px-6 lg:py-3 lg:text-lg bg-brand-red hover:bg-red-700 hover:scale-105 active:scale-95">
								<span class="flex relative z-10 items-center">
									{t('nav.contact')}
									<svg class="ml-2 w-5 h-5 transition-transform duration-200" id="contact-phone" fill="currentColor" viewBox="0 0 20 20">
										<path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
									</svg>
								</span>
								<!-- Sparkle container -->
								<div class="absolute inset-0 pointer-events-none" id="sparkle-container"></div>
							</a>
						)}
						
						<!-- Language Selector -->
						<LanguageSelector />
					</div>
				</div>
				
				<!-- Mobile Menu Button -->
				<div class="md:hidden">
					<button id="mobile-menu-button" class="p-2 text-white">
						<svg id="hamburger-icon" class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
						</svg>
						<svg id="close-icon" class="hidden w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
						</svg>
					</button>
				</div>
			</div>
		</div>
	</nav>

	<!-- MAIN CONTENT -->
	<main class="pt-2 min-h-screen bg-white">
		<slot />
	</main>

	<!-- MOBILE NAVIGATION DRAWER -->
	<div id="mobile-menu-overlay" class="fixed inset-0 invisible z-[80] opacity-0 backdrop-blur-sm transition-all duration-300 md:hidden bg-black/50"></div>
	
	<div id="mobile-menu-drawer" class="fixed right-0 bottom-0 left-0 z-[90] bg-white rounded-t-3xl shadow-2xl transition-transform duration-300 ease-out transform translate-y-full md:hidden">
		<div class="px-4 py-6">
			<!-- Drawer Handle -->
			<div class="flex justify-center mb-4">
				<div class="w-12 h-1 bg-gray-300 rounded-full"></div>
			</div>
			
			<!-- Logo Section -->
			<div class="flex justify-center items-center mb-6">
				<a href={lang === 'en' ? '/' : `/${lang}`} class="flex items-center">
					<LottieLogo width={180} height={90} className="flex-shrink-0" variant="mobile" />
				</a>
			</div>
			
			<!-- Navigation Links -->
			<nav class="mb-6 space-y-3">
				{currentPage === 'home' ? (
					<div class="flex justify-between items-center p-4 bg-gray-100 rounded-xl border-l-4 border-gray-300">
						<a href={lang === 'en' ? '/' : `/${lang}`} class="flex items-center text-lg font-bold text-gray-900">
							<svg class="mr-3 w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
								<path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
							</svg>
							{t('nav.home')}
						</a>
						<div class="w-2 h-2 bg-gray-400 rounded-full"></div>
					</div>
				) : (
					<a href={lang === 'en' ? '/' : `/${lang}`} class="flex items-center p-4 text-gray-700 rounded-xl">
						<svg class="mr-3 w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
							<path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path>
						</svg>
						<span class="text-lg font-semibold">{t('nav.home')}</span>
					</a>
				)}
				
				{currentPage === 'about' ? (
					<div class="flex justify-between items-center p-4 bg-gray-100 rounded-xl border-l-4 border-gray-300">
						<a href={lang === 'en' ? '/about' : `/${lang}/about`} class="flex items-center text-lg font-bold text-gray-900">
							<svg class="mr-3 w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
								<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
							</svg>
							{t('nav.about')}
						</a>
						<div class="w-2 h-2 bg-gray-400 rounded-full"></div>
					</div>
				) : (
					<a href={lang === 'en' ? '/about' : `/${lang}/about`} class="flex items-center p-4 text-gray-700 rounded-xl">
						<svg class="mr-3 w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
							<path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"></path>
						</svg>
						<span class="text-lg font-semibold">{t('nav.about')}</span>
					</a>
				)}
				
				{currentPage === 'services' ? (
					<div class="flex justify-between items-center p-4 bg-gray-100 rounded-xl border-l-4 border-gray-300">
						<a href={lang === 'en' ? '/services' : `/${lang}/services`} class="flex items-center text-lg font-bold text-gray-900">
							<svg class="mr-3 w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
								<path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
							</svg>
							{t('nav.services')}
						</a>
						<div class="w-2 h-2 bg-gray-400 rounded-full"></div>
					</div>
				) : (
					<a href={lang === 'en' ? '/services' : `/${lang}/services`} class="flex items-center p-4 text-gray-700 rounded-xl">
						<svg class="mr-3 w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
							<path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
						<span class="text-lg font-semibold">{t('nav.services')}</span>
					</a>
				)}
			</nav>
			
			<!-- Language Selector Section -->
			<div class="pb-4 mb-6 border-b border-gray-200">
				<div class="mb-2">
					<h3 class="text-sm font-semibold tracking-wide text-gray-500 uppercase">{t('nav.language')}</h3>
				</div>
				<div class="relative w-full mobile-language-selector">
					<!-- Mobile Language Selector Button -->
					<button
						type="button"
						class="flex justify-between items-center p-4 w-full text-left text-gray-700 rounded-xl"
						aria-expanded="false"
						aria-haspopup="true"
						id="mobile-language-button"
					>
						<div class="flex gap-3 items-center">
							<span class="text-xl" aria-hidden="true">{languageConfig[lang].flag}</span>
							<div class="flex flex-col">
								<span class="text-lg font-semibold">{languageConfig[lang].nativeName}</span>
								<span class="text-sm text-gray-500">{languageConfig[lang].flagName}</span>
							</div>
						</div>
						<svg class="w-5 h-5 transition-transform duration-200" id="mobile-dropdown-arrow" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
							<path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
						</svg>
					</button>

					<!-- Mobile Dropdown Menu -->
					<div
						class="absolute right-0 left-0 bottom-full invisible z-50 mb-2 bg-white rounded-lg border border-gray-200 shadow-lg opacity-0 transition-all duration-200 transform origin-bottom scale-95"
						role="menu"
						aria-orientation="vertical"
						aria-labelledby="mobile-language-button"
						id="mobile-language-dropdown"
					>
						<div class="py-1" role="none">
							{Object.entries(languageConfig).map(([langCode, config]) => {
								const href = langCode === 'en' ? basePath : `/${langCode}${basePath}`;
								const isActive = langCode === lang;
								
								return (
									<a
										href={href}
										class={`flex items-center gap-3 px-4 py-3 text-sm mobile-lang-option ${
											isActive 
												? 'bg-blue-50 text-blue-700 font-semibold' 
												: 'text-gray-700'
										}`}
										role="menuitem"
										tabindex="-1"
									>
										<span class="text-lg" aria-hidden="true">{config.flag}</span>
										<div class="flex flex-col">
											<span class="font-medium">{config.nativeName}</span>
											<span class="text-xs text-gray-500">{config.flagName}</span>
										</div>
										{isActive && (
											<svg class="ml-auto w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
												<path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
											</svg>
										)}
									</a>
								);
							})}
						</div>
					</div>
				</div>
			</div>
			
			<!-- Contact CTA Button with Ping Animation -->
			<div class="relative">
				{currentPage === 'contact' ? (
					<div class="p-4 bg-red-50 rounded-xl border-l-4 border-brand-red">
						<div class="flex justify-center items-center text-lg font-bold text-brand-red">
							<svg class="mr-3 w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
								<path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"></path>
								<path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
							</svg>
							{t('nav.contact')}
						</div>
					</div>
				) : (
					<div class="relative mobile-contact-button-container">
						<!-- Gentle Glow Animation -->
						<div class="absolute -inset-0.5 bg-gradient-to-r via-red-500 rounded-2xl opacity-40 animate-gentle-glow from-brand-red to-brand-red"></div>
						
						<!-- Subtle Sparkles -->
						<div class="absolute inset-0 sparkle-container">
							<div class="sparkle sparkle-1"></div>
							<div class="sparkle sparkle-2"></div>
							<div class="sparkle sparkle-3"></div>
						</div>
						
						<a href={lang === 'en' ? '/contact' : `/${lang}/contact`} class="block relative px-6 py-4 text-lg font-bold text-center text-white rounded-xl shadow-lg bg-brand-red">
							<div class="flex justify-center items-center">
								<svg class="mr-3 w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
									<path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"></path>
									<path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"></path>
								</svg>
								{t('nav.contact')}
								<svg class="ml-3 w-5 h-5 rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
								</svg>
							</div>
						</a>
					</div>
				)}
			</div>
			
			<!-- Spacer for safe area (especially iPhone) -->
			<div class="h-8"></div>
		</div>
	</div>

	<!-- FOOTER -->
	<footer class="bg-brand-blue">
		<div class="px-4 py-6 mx-auto max-w-7xl sm:px-6 lg:px-8">
			<div class="flex flex-col justify-between items-center md:flex-row">
				<div class="mb-4 text-center text-white md:text-left md:mb-0">
					<p class="text-sm font-semibold capitalize lg:text-base">
						{t('footer.copyright')}
					</p>
				</div>
				<div class="flex space-x-4">
					<!-- Social Media Icons -->
					<div class="flex justify-center items-center w-8 h-8 bg-gray-600 rounded-full transition-colors lg:w-10 lg:h-10 hover:bg-gray-500">
						<svg class="w-4 h-4 text-white lg:w-5 lg:h-5" fill="currentColor" viewBox="0 0 24 24">
							<path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
						</svg>
					</div>
				</div>
			</div>
		</div>
	</footer>

	<!-- GSAP Animation System -->
	<script>
	// Import GSAP and ScrollTrigger
	import { gsap } from 'gsap/dist/gsap';
	import { ScrollTrigger } from 'gsap/dist/ScrollTrigger';

	// Register ScrollTrigger plugin
	gsap.registerPlugin(ScrollTrigger);

			// Initialize animations when DOM is ready
		document.addEventListener('DOMContentLoaded', () => {
			console.log('🚀 Initializing GSAP animations...');

			// Desktop Navigation Underline Animation (Transform Optimized)
			const navUnderline = document.getElementById('nav-underline');
			const navLinks = document.querySelectorAll('.nav-link');
			const activeLink = document.querySelector('.nav-link.active');
			const contactButtonActive = document.getElementById('contact-button-active');
			const desktopNav = document.getElementById('desktop-nav');

			if (navUnderline && navLinks.length > 0 && desktopNav) {
				// Base width for scaling calculations
				const baseWidth = 100;
				
				// Cache link transforms for performance
				const linkCache = new Map();
				let animationId = null;
				
				// Function to cache link transforms
				function cacheTransforms() {
					const navRect = desktopNav.getBoundingClientRect();
					navLinks.forEach(link => {
						const linkRect = link.getBoundingClientRect();
						const x = linkRect.left - navRect.left;
						const scaleX = linkRect.width / baseWidth;
						linkCache.set(link, { x, scaleX });
					});
				}
				
				// Initial cache
				cacheTransforms();
				
				// Set base width for underline
				gsap.set(navUnderline, {
					width: baseWidth
				});
				
				// Recache on resize with debouncing
				let resizeTimeout;
				window.addEventListener('resize', () => {
					clearTimeout(resizeTimeout);
					resizeTimeout = setTimeout(() => {
						cacheTransforms();
						// Reposition underline for active link
						if (activeLink && linkCache.has(activeLink)) {
							const cached = linkCache.get(activeLink);
							gsap.set(navUnderline, {
								x: cached.x,
								scaleX: cached.scaleX,
								opacity: 1
							});
						}
					}, 150);
				});

				// Position underline under active link on page load
				if (activeLink && linkCache.has(activeLink)) {
					const cached = linkCache.get(activeLink);
					gsap.set(navUnderline, {
						x: cached.x,
						scaleX: cached.scaleX,
						opacity: 1
					});
				} else if (contactButtonActive) {
					// Hide underline when contact button is active
					gsap.set(navUnderline, {
						opacity: 0
					});
				}

				// Optimized hover animations using cached transforms
				navLinks.forEach(link => {
					link.addEventListener('mouseenter', () => {
						if (animationId) return; // Prevent overlapping animations
						
						const cached = linkCache.get(link);
						if (cached) {
							animationId = gsap.to(navUnderline, {
								x: cached.x,
								scaleX: cached.scaleX,
								opacity: 1,
								duration: 0.15,
								ease: 'power1.out',
								onComplete: () => {
									animationId = null;
								}
							});
						}
					});
				});

				// Return underline to active link on mouse leave
				desktopNav.addEventListener('mouseleave', () => {
					if (animationId) {
						gsap.killTweensOf(navUnderline);
						animationId = null;
					}
					
					if (activeLink && linkCache.has(activeLink)) {
						const cached = linkCache.get(activeLink);
						animationId = gsap.to(navUnderline, {
							x: cached.x,
							scaleX: cached.scaleX,
							opacity: 1,
							duration: 0.15,
							ease: 'power1.out',
							onComplete: () => {
								animationId = null;
							}
						});
					} else {
						animationId = gsap.to(navUnderline, {
							opacity: 0,
							duration: 0.15,
							ease: 'power1.out',
							onComplete: () => {
								animationId = null;
							}
						});
					}
				});
			}

			// Contact Button Animations (Performance Optimized)
			const contactButton = document.getElementById('contact-button');
			const contactPhone = document.getElementById('contact-phone');
			const sparkleContainer = document.getElementById('sparkle-container');

			if (contactButton && contactPhone && sparkleContainer) {
				// Optimized sparkle creation with object pooling
				const sparklePool = [];
				const maxPoolSize = 15;
				
				// Pre-create sparkle elements for reuse
				for (let i = 0; i < maxPoolSize; i++) {
					const sparkle = document.createElement('div');
					sparkle.className = 'absolute w-1 h-1 bg-white rounded-full pointer-events-none';
					sparkle.style.willChange = 'transform, opacity';
					sparklePool.push(sparkle);
				}
				
				function createSparkles() {
					const sparkleCount = 12;
					const usedSparkles = sparklePool.slice(0, sparkleCount);
					
					usedSparkles.forEach((sparkle, i) => {
						// Random position within button
						const x = Math.random() * 100;
						const y = Math.random() * 100;
						sparkle.style.left = x + '%';
						sparkle.style.top = y + '%';
						
						sparkleContainer.appendChild(sparkle);
						
						// Animate sparkle with optimized transforms
						gsap.set(sparkle, { 
							scale: 0, 
							opacity: 1,
							rotation: Math.random() * 360
						});
						
						gsap.to(sparkle, {
							scale: Math.random() * 1.5 + 0.5,
							opacity: 0,
							rotation: Math.random() * 360 + 180,
							x: (Math.random() - 0.5) * 40,
							y: (Math.random() - 0.5) * 40,
							duration: 0.8,
							ease: 'power1.out',
							delay: Math.random() * 0.2,
							onComplete: () => {
								sparkle.remove();
							}
						});
					});
				}

				// Optimized hover animations with will-change
				contactButton.style.willChange = 'transform, box-shadow, border-color';
				contactPhone.style.willChange = 'transform';
				
				// Hover animations
				contactButton.addEventListener('mouseenter', () => {
					// Phone wiggle animation (like it's ringing)
					gsap.to(contactPhone, {
						rotation: 15,
						scale: 1.1,
						duration: 0.15,
						ease: 'power1.out',
						yoyo: true,
						repeat: 3
					});
					
					// Animated white border
					gsap.to(contactButton, {
						borderColor: 'rgba(255, 255, 255, 0.8)',
						duration: 0.2,
						ease: 'power1.out'
					});
					
					// Button shadow enhancement
					gsap.to(contactButton, {
						boxShadow: '0 10px 25px rgba(239, 68, 68, 0.4), 0 0 20px rgba(255, 255, 255, 0.3)',
						duration: 0.2,
						ease: 'power1.out'
					});
				});

				contactButton.addEventListener('mouseleave', () => {
					// Reset phone
					gsap.to(contactPhone, {
						rotation: 0,
						scale: 1,
						duration: 0.2,
						ease: 'power1.out'
					});
					
					// Reset border
					gsap.to(contactButton, {
						borderColor: 'transparent',
						duration: 0.2,
						ease: 'power1.out'
					});
					
					// Reset shadow
					gsap.to(contactButton, {
						boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',
						duration: 0.2,
						ease: 'power1.out'
					});
				});

				// Click/Press animations
				contactButton.addEventListener('mousedown', () => {
					// Create sparkle effect
					createSparkles();
					
					// Phone "pick up" animation
					gsap.to(contactPhone, {
						rotation: -10,
						scale: 0.9,
						duration: 0.1,
						ease: 'power1.out'
					});
					
					// Brief white border flash
					gsap.to(contactButton, {
						borderColor: 'rgba(255, 255, 255, 1)',
						duration: 0.1,
						ease: 'power1.out'
					});
				});

				contactButton.addEventListener('mouseup', () => {
					// Reset phone to hover state
					gsap.to(contactPhone, {
						rotation: 0,
						scale: 1.1,
						duration: 0.15,
						ease: 'back.out(1.7)'
					});
					
					// Return border to hover state
					gsap.to(contactButton, {
						borderColor: 'rgba(255, 255, 255, 0.8)',
						duration: 0.15,
						ease: 'power1.out'
					});
				});

				// Fun periodic pulse animation (like incoming call)
				gsap.to(contactButton, {
					scale: 1.02,
					duration: 2,
					ease: 'power1.inOut',
					yoyo: true,
					repeat: -1,
					delay: 3 // Start after 3 seconds
				});

				// Subtle phone ring animation every 8 seconds (optimized)
				function phoneRingAnimation() {
					gsap.to(contactPhone, {
						rotation: 5,
						duration: 0.1,
						ease: 'power1.inOut',
						yoyo: true,
						repeat: 5,
						repeatDelay: 0.1,
						onComplete: () => {
							gsap.delayedCall(8, phoneRingAnimation);
						}
					});
				}
				
				gsap.delayedCall(5, phoneRingAnimation);
			}

			// Mobile Navigation functionality (Performance Optimized)
		const mobileMenuButton = document.getElementById('mobile-menu-button');
		const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');
		const mobileMenuDrawer = document.getElementById('mobile-menu-drawer');
		const hamburgerIcon = document.getElementById('hamburger-icon');
		const closeIcon = document.getElementById('close-icon');
		let isMenuOpen = false;

		// Optimize mobile menu elements
		if (mobileMenuDrawer) {
			mobileMenuDrawer.style.willChange = 'transform';
		}
		if (mobileMenuOverlay) {
			mobileMenuOverlay.style.willChange = 'opacity';
		}

		// Drag to close functionality
		let isDragging = false;
		let startY = 0;
		let currentY = 0;
		let initialTransform = 0;
		const dragThreshold = 100; // Minimum distance to trigger close

		function toggleMobileMenu() {
			isMenuOpen = !isMenuOpen;
			
			if (isMenuOpen) {
				// Open menu
				mobileMenuOverlay.classList.remove('opacity-0', 'invisible');
				mobileMenuOverlay.classList.add('opacity-100', 'visible');
				mobileMenuDrawer.classList.remove('translate-y-full');
				mobileMenuDrawer.classList.add('translate-y-0');
				mobileMenuDrawer.style.transform = 'translateY(0)';
				hamburgerIcon.classList.add('hidden');
				closeIcon.classList.remove('hidden');
				document.body.style.overflow = 'hidden';
				
				// Trigger logo animation when menu opens
				triggerMobileLogoAnimation();
			} else {
				// Close menu
				mobileMenuOverlay.classList.remove('opacity-100', 'visible');
				mobileMenuOverlay.classList.add('opacity-0', 'invisible');
				mobileMenuDrawer.classList.remove('translate-y-0');
				mobileMenuDrawer.classList.add('translate-y-full');
				mobileMenuDrawer.style.transform = '';
				hamburgerIcon.classList.remove('hidden');
				closeIcon.classList.add('hidden');
				document.body.style.overflow = '';
			}
		}

		// Function to trigger mobile logo animation
		function triggerMobileLogoAnimation() {
			// Find the mobile logo container
			const mobileLogo = document.querySelector('.lottie-logo[data-variant="mobile"]') as HTMLElement;
			
			if (mobileLogo) {
				// Dispatch a custom event to trigger the Lottie animation
				const animationEvent = new CustomEvent('triggerLottieAnimation', {
					detail: { variant: 'mobile' }
				});
				mobileLogo.dispatchEvent(animationEvent);
			}
		}

		function closeMobileMenu() {
			if (isMenuOpen) {
				toggleMobileMenu();
			}
		}

		// Optimized touch event handlers for drag to close
		let dragRafId = null;
		
		function handleTouchStart(e) {
			if (!isMenuOpen) return;
			
			isDragging = true;
			startY = e.touches[0].clientY;
			currentY = startY;
			
			// Add dragging class for visual feedback
			mobileMenuDrawer.classList.add('dragging');
		}

		function handleTouchMove(e) {
			if (!isDragging || !isMenuOpen) return;
			
			e.preventDefault();
			currentY = e.touches[0].clientY;
			
			// Throttle DOM updates with requestAnimationFrame
			if (dragRafId) return;
			
			dragRafId = requestAnimationFrame(() => {
				const deltaY = currentY - startY;
				
				// Only allow dragging down
				if (deltaY > 0) {
					const translateY = Math.min(deltaY, window.innerHeight);
					mobileMenuDrawer.style.transform = `translateY(${translateY}px)`;
					
					// Fade overlay based on drag distance
					const opacity = Math.max(0.1, 1 - (deltaY / 300));
					mobileMenuOverlay.style.opacity = opacity.toString();
				}
				
				dragRafId = null;
			});
		}

		function handleTouchEnd(e) {
			if (!isDragging || !isMenuOpen) return;
			
			isDragging = false;
			const deltaY = currentY - startY;
			
			// Cancel any pending animation frame
			if (dragRafId) {
				cancelAnimationFrame(dragRafId);
				dragRafId = null;
			}
			
			// Remove dragging class to re-enable transitions
			mobileMenuDrawer.classList.remove('dragging');
			
			if (deltaY > dragThreshold) {
				// Close menu if dragged down enough
				closeMobileMenu();
			} else {
				// Snap back to original position
				mobileMenuDrawer.style.transform = 'translateY(0)';
				mobileMenuOverlay.style.opacity = '';
			}
		}

		// Optimized mouse event handlers for desktop testing
		function handleMouseDown(e) {
			if (!isMenuOpen) return;
			
			isDragging = true;
			startY = e.clientY;
			currentY = startY;
			
			mobileMenuDrawer.classList.add('dragging');
		}

		function handleMouseMove(e) {
			if (!isDragging || !isMenuOpen) return;
			
			e.preventDefault();
			currentY = e.clientY;
			
			// Throttle DOM updates with requestAnimationFrame
			if (dragRafId) return;
			
			dragRafId = requestAnimationFrame(() => {
				const deltaY = currentY - startY;
				
				if (deltaY > 0) {
					const translateY = Math.min(deltaY, window.innerHeight);
					mobileMenuDrawer.style.transform = `translateY(${translateY}px)`;
					
					const opacity = Math.max(0.1, 1 - (deltaY / 300));
					mobileMenuOverlay.style.opacity = opacity.toString();
				}
				
				dragRafId = null;
			});
		}

		function handleMouseUp(e) {
			if (!isDragging || !isMenuOpen) return;
			
			isDragging = false;
			const deltaY = currentY - startY;
			
			// Cancel any pending animation frame
			if (dragRafId) {
				cancelAnimationFrame(dragRafId);
				dragRafId = null;
			}
			
			mobileMenuDrawer.classList.remove('dragging');
			
			if (deltaY > dragThreshold) {
				closeMobileMenu();
			} else {
				mobileMenuDrawer.style.transform = 'translateY(0)';
				mobileMenuOverlay.style.opacity = '';
			}
		}

		// Event listeners
		if (mobileMenuButton) {
			mobileMenuButton.addEventListener('click', toggleMobileMenu);
		}

		if (mobileMenuOverlay) {
			mobileMenuOverlay.addEventListener('click', closeMobileMenu);
		}

		// Close menu when clicking navigation links
		const mobileNavLinks = mobileMenuDrawer?.querySelectorAll('a[href]');
		mobileNavLinks?.forEach(link => {
			link.addEventListener('click', closeMobileMenu);
		});

		// Close menu on escape key
		document.addEventListener('keydown', (e) => {
			if (e.key === 'Escape' && isMenuOpen) {
				closeMobileMenu();
			}
		});

		// Add drag to close event listeners
		if (mobileMenuDrawer) {
			// Touch events for mobile
			mobileMenuDrawer.addEventListener('touchstart', handleTouchStart, { passive: false });
			mobileMenuDrawer.addEventListener('touchmove', handleTouchMove, { passive: false });
			mobileMenuDrawer.addEventListener('touchend', handleTouchEnd, { passive: false });
			
			// Mouse events for desktop testing
			mobileMenuDrawer.addEventListener('mousedown', handleMouseDown);
			document.addEventListener('mousemove', handleMouseMove);
			document.addEventListener('mouseup', handleMouseUp);
		}

		// Set initial states for animated elements (exclude count-up elements and stagger containers)
		const animatedElements = document.querySelectorAll('[data-animate]:not([data-animate="count-up"]):not([data-animate="stagger"])');
		if (animatedElements.length > 0) {
			animatedElements.forEach(element => {
				(element as HTMLElement).style.willChange = 'transform, opacity';
			});
			
			gsap.set('[data-animate]:not([data-animate="count-up"]):not([data-animate="stagger"])', { 
				opacity: 0,
				y: 50,
				scale: 0.95
			});
		}

		// Set initial states for hero elements
		const heroElements = document.querySelectorAll('[data-hero-animate]');
		if (heroElements.length > 0) {
			heroElements.forEach(element => {
				(element as HTMLElement).style.willChange = 'transform, opacity';
			});
			
			gsap.set('[data-hero-animate]', {
				opacity: 0,
				y: 30
			});

			// Hero section entrance animations
			const heroTimeline = gsap.timeline({ delay: 0.5 });
			
			heroTimeline
				.to('[data-hero-animate]', {
					duration: 0.8,
					y: 0,
					opacity: 1,
					stagger: 0.15,
					ease: 'power1.out'
				});
		}

		// Optimized scroll-triggered animations
		const dataAnimateElements = document.querySelectorAll('[data-animate]');
		if (dataAnimateElements.length > 0) {
			gsap.utils.toArray('[data-animate]').forEach((element) => {
				const el = element as HTMLElement;
				const animationType = el.getAttribute('data-animate');
				const delay = parseFloat(el.getAttribute('data-delay') || '0');
				
				let animation = {};
				
				switch (animationType) {
					case 'fade-up':
						animation = {
							duration: 0.8,
							y: 0,
							opacity: 1,
							ease: 'power1.out'
						};
						break;
					case 'slide-up':
						animation = {
							duration: 1,
							y: 0,
							opacity: 1,
							ease: 'power1.out'
						};
						break;
					case 'scale-in':
						animation = {
							duration: 0.6,
							scale: 1,
							opacity: 1,
							ease: 'back.out(1.7)'
						};
						break;
					case 'stagger':
						// Handle staggered children animations
						const children = el.children;
						gsap.set(children, { opacity: 0, y: 30 });
						
						// Add will-change to stagger children
						Array.from(children).forEach(child => {
							(child as HTMLElement).style.willChange = 'transform, opacity';
						});
						
						ScrollTrigger.create({
							trigger: el,
							start: 'top 80%',
							onEnter: () => {
								gsap.to(children, {
									duration: 0.6,
									y: 0,
									opacity: 1,
									stagger: 0.1,
									ease: 'power1.out',
									delay: delay / 1000
								});
							}
						});
						return; // Skip the default ScrollTrigger creation
					default:
						animation = {
							duration: 0.8,
							y: 0,
							opacity: 1,
							scale: 1,
							ease: 'power1.out'
						};
				}
				
				// Create ScrollTrigger for the animation
				ScrollTrigger.create({
					trigger: el,
					start: 'top 80%',
					onEnter: () => {
						gsap.to(el, {
							...animation,
							delay: delay / 1000
						});
					}
				});
			});
		}

		// Optimized count-up animations for statistics
		const statsContainer = document.querySelector('.stats-container');
		const countNumbers = document.querySelectorAll('.count-number');
		if (statsContainer && countNumbers.length > 0) {
			countNumbers.forEach(element => {
				const endValue = parseInt(element.getAttribute('data-end-value') || '100');
				const countObj = { value: 0 };
				
				ScrollTrigger.create({
					trigger: '.stats-container',
					start: 'top 80%',
					onEnter: () => {
						gsap.to(countObj, {
							duration: 1.5,
							value: endValue,
							ease: 'power1.out',
							delay: 0.2,
							onUpdate: function() {
								const val = Math.round(countObj.value);
								if (endValue >= 1000000) {
									element.textContent = (val / 1000000).toFixed(1) + 'M+';
								} else if (endValue >= 1000) {
									element.textContent = Math.round(val / 1000) + 'K+';
								} else {
									element.textContent = val + '+';
								}
							}
						});
					}
				});
			});
		}

		// Optimized button hover animations
		const buttons = document.querySelectorAll('button');
		if (buttons.length > 0) {
			buttons.forEach(button => {
				(button as HTMLElement).style.willChange = 'transform';
				
				button.addEventListener('mouseenter', () => {
					gsap.to(button, {
						scale: 1.05,
						duration: 0.2,
						ease: 'power1.out'
					});
				});

				button.addEventListener('mouseleave', () => {
					gsap.to(button, {
						scale: 1,
						duration: 0.2,
						ease: 'power1.out'
					});
				});
			});
		}

		// Optimized card hover effects
		const cards = document.querySelectorAll('.service-card, .testimonial-card');
		if (cards.length > 0) {
			cards.forEach(card => {
				// Set up optimized card animations
				(card as HTMLElement).style.willChange = 'transform, box-shadow';
				
				gsap.set(card, {
					boxShadow: '0 4px 20px rgba(0,0,0,0.1)'
				});

				card.addEventListener('mouseenter', () => {
					gsap.to(card, {
						y: -10,
						scale: 1.02,
						boxShadow: '0 20px 40px rgba(0,0,0,0.15)',
						duration: 0.3,
						ease: 'power1.out'
					});
				});

				card.addEventListener('mouseleave', () => {
					gsap.to(card, {
						y: 0,
						scale: 1,
						boxShadow: '0 4px 20px rgba(0,0,0,0.1)',
						duration: 0.3,
						ease: 'power1.out'
					});
				});
			});
		}

		// Optimized navigation bar animation on scroll
		const navElement = document.querySelector('nav');
		if (navElement) {
			(navElement as HTMLElement).style.willChange = 'background-color, backdrop-filter';
		}
		
		ScrollTrigger.create({
			start: 'top -80',
			end: 99999,
			toggleClass: {
				className: 'nav-scrolled',
				targets: '#site-nav'
			}
		});

		// Optimized floating animation for decorative elements
		const floatElements = document.querySelectorAll('.float-element');
		if (floatElements.length > 0) {
			floatElements.forEach(element => {
				(element as HTMLElement).style.willChange = 'transform';
			});
			
			gsap.to('.float-element', {
				y: -10,
				duration: 2,
				ease: 'power1.inOut',
				yoyo: true,
				repeat: -1,
				stagger: 0.5
			});
		}

		console.log('✨ GSAP animations initialized successfully!');
	});
	</script>

<style>




	/* Mobile contact button fun animations */
	.mobile-contact-button-container {
		overflow: hidden;
	}

	@keyframes gentle-glow {
		0%, 100% {
			opacity: 0.3;
			transform: scale(0.95);
		}
		50% {
			opacity: 0.6;
			transform: scale(1.02);
		}
	}

	.animate-gentle-glow {
		animation: gentle-glow 3s ease-in-out infinite;
	}

	/* Sparkle animations */
	.sparkle-container {
		pointer-events: none;
		overflow: hidden;
		border-radius: 1rem;
	}

	.sparkle {
		position: absolute;
		width: 4px;
		height: 4px;
		background: linear-gradient(45deg, #ffffff, #fbbf24);
		border-radius: 50%;
		opacity: 0;
		animation: sparkle-twinkle 4s ease-in-out infinite;
	}

	.sparkle-1 {
		top: 20%;
		left: 25%;
		animation-delay: 0s;
	}

	.sparkle-2 {
		top: 70%;
		right: 30%;
		animation-delay: 1.5s;
	}

	.sparkle-3 {
		top: 40%;
		right: 20%;
		animation-delay: 2.8s;
	}

	@keyframes sparkle-twinkle {
		0%, 90%, 100% {
			opacity: 0;
			transform: scale(0) rotate(0deg);
		}
		5%, 15% {
			opacity: 1;
			transform: scale(1) rotate(180deg);
		}
		10% {
			opacity: 0.8;
			transform: scale(1.2) rotate(360deg);
		}
	}

	/* Enhance button hover state */
	.mobile-contact-button-container:hover .animate-gentle-glow {
		animation-duration: 1.5s;
		opacity: 0.8;
	}

	.mobile-contact-button-container:hover .sparkle {
		animation-duration: 2s;
	}

	/* Mobile menu drawer enhancements */
	#mobile-menu-drawer {
		box-shadow: 0 -10px 25px -5px rgba(0, 0, 0, 0.1);
	}

	#mobile-menu-drawer.dragging {
		transition: none !important;
	}
</style>

<script>
	// Mobile Language Selector functionality
	document.addEventListener('DOMContentLoaded', () => {
		const mobileButton = document.getElementById('mobile-language-button');
		const mobileDropdown = document.getElementById('mobile-language-dropdown');
		const mobileArrow = document.getElementById('mobile-dropdown-arrow');
		let isMobileOpen = false;

		if (!mobileButton || !mobileDropdown || !mobileArrow) return;

		function toggleMobileDropdown() {
			isMobileOpen = !isMobileOpen;
			
			if (isMobileOpen) {
				mobileDropdown.classList.remove('invisible', 'opacity-0', 'scale-95');
				mobileDropdown.classList.add('visible', 'opacity-100', 'scale-100');
				mobileArrow.style.transform = 'rotate(180deg)';
				mobileButton.setAttribute('aria-expanded', 'true');
			} else {
				mobileDropdown.classList.remove('visible', 'opacity-100', 'scale-100');
				mobileDropdown.classList.add('invisible', 'opacity-0', 'scale-95');
				mobileArrow.style.transform = 'rotate(0deg)';
				mobileButton.setAttribute('aria-expanded', 'false');
			}
		}

		function closeMobileDropdown() {
			if (isMobileOpen) {
				toggleMobileDropdown();
			}
		}

		// Toggle dropdown on button click
		mobileButton.addEventListener('click', (e) => {
			e.stopPropagation();
			toggleMobileDropdown();
		});

		// Close dropdown when clicking outside
		document.addEventListener('click', closeMobileDropdown);

		// Close mobile navigation when language is selected
		const mobileLanguageOptions = mobileDropdown.querySelectorAll('.mobile-lang-option');
		mobileLanguageOptions.forEach(option => {
			option.addEventListener('click', () => {
				// Close mobile menu drawer
				const mobileMenuDrawer = document.getElementById('mobile-menu-drawer');
				const mobileMenuOverlay = document.getElementById('mobile-menu-overlay');
				const hamburgerIcon = document.getElementById('hamburger-icon');
				const closeIcon = document.getElementById('close-icon');
				
				if (mobileMenuDrawer && mobileMenuOverlay) {
					mobileMenuDrawer.classList.add('translate-y-full');
					mobileMenuOverlay.classList.add('invisible', 'opacity-0');
					mobileMenuOverlay.classList.remove('visible', 'opacity-100');
					
					if (hamburgerIcon && closeIcon) {
						hamburgerIcon.classList.remove('hidden');
						closeIcon.classList.add('hidden');
					}
				}
			});
		});
	});
</script>
</body>
</html>
