---
import { getLangFromUrl, languageConfig, type Language, useTranslations } from '../i18n/utils';

const currentLang = getLangFromUrl(Astro.url);
const t = useTranslations(currentLang);
const currentPath = Astro.url.pathname;

// Get the base path without language prefix
const basePath = currentPath.replace(/^\/[a-z]{2}(?=\/|$)/, '') || '/';
---

<div class="inline-block relative text-left" id="language-selector">
  <!-- Language Selector Button -->
  <button
    type="button"
    class="inline-flex gap-1 justify-center items-center px-3 py-2 text-lg font-medium text-white rounded-lg border backdrop-blur-sm transition-all duration-200 border-white/20 bg-white/10 hover:bg-white/20 hover:border-white/30 focus:outline-none focus:ring-2 focus:ring-white/50"
    aria-expanded="false" 
    aria-haspopup="true"
    id="language-menu-button"
  >
    <span class="text-lg" aria-hidden="true">{languageConfig[currentLang].flag}</span>
    <svg class="w-4 h-4 transition-transform duration-200" id="dropdown-arrow" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
      <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
    </svg>
  </button>

  <!-- Dropdown Menu -->
  <div
    class="absolute right-0 invisible z-50 mt-2 w-48 bg-white rounded-lg border border-gray-200 ring-1 shadow-lg opacity-0 transition-all duration-200 transform origin-top-right scale-95 ring-black/5"
    role="menu"
    aria-orientation="vertical" 
    aria-labelledby="language-menu-button"
    id="language-dropdown"
  >
    <div class="py-1" role="none">
      {Object.entries(languageConfig).map(([lang, config]) => {
        const href = lang === 'en' ? basePath : `/${lang}${basePath}`;
        const isActive = lang === currentLang;
        
        return (
          <a
            href={href}
            class={`group flex items-center gap-3 px-4 py-3 text-sm transition-colors duration-150 ${
              isActive 
                ? 'bg-blue-50 text-blue-700 font-semibold' 
                : 'text-gray-700 hover:bg-gray-50 hover:text-gray-900'
            }`}
            role="menuitem"
            tabindex="-1"
          >
            <span class="text-lg" aria-hidden="true">{config.flag}</span>
            <div class="flex flex-col">
              <span class="font-medium">{config.nativeName}</span>
              <span class="text-xs text-gray-500">{config.flagName}</span>
            </div>
            {isActive && (
              <svg class="ml-auto w-4 h-4 text-blue-600" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
              </svg>
            )}
          </a>
        );
      })}
    </div>
  </div>
</div>

<script>
  // Language selector dropdown functionality
  document.addEventListener('DOMContentLoaded', () => {
    const button = document.getElementById('language-menu-button');
    const dropdown = document.getElementById('language-dropdown');
    const arrow = document.getElementById('dropdown-arrow');
    let isOpen = false;

    if (!button || !dropdown || !arrow) return;

    function toggleDropdown() {
      isOpen = !isOpen;
      
      if (isOpen) {
        dropdown.classList.remove('invisible', 'opacity-0', 'scale-95');
        dropdown.classList.add('visible', 'opacity-100', 'scale-100');
        arrow.style.transform = 'rotate(180deg)';
        button.setAttribute('aria-expanded', 'true');
      } else {
        dropdown.classList.remove('visible', 'opacity-100', 'scale-100');
        dropdown.classList.add('invisible', 'opacity-0', 'scale-95');
        arrow.style.transform = 'rotate(0deg)';
        button.setAttribute('aria-expanded', 'false');
      }
    }

    function closeDropdown() {
      if (isOpen) {
        toggleDropdown();
      }
    }

    // Toggle dropdown on button click
    button.addEventListener('click', (e) => {
      e.stopPropagation();
      toggleDropdown();
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', closeDropdown);

    // Close dropdown on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isOpen) {
        closeDropdown();
      }

    });

    // Keyboard navigation
    dropdown.addEventListener('keydown', (e) => {
      const items = dropdown.querySelectorAll('[role="menuitem"]');
      const currentIndex = Array.from(items).findIndex(item => item === document.activeElement);
      
      switch (e.key) {
        case 'ArrowDown':
          e.preventDefault();
          const nextIndex = currentIndex < items.length - 1 ? currentIndex + 1 : 0;
          (items[nextIndex] as HTMLElement).focus();
          break; 
        case 'ArrowUp':
          e.preventDefault();
          const prevIndex = currentIndex > 0 ? currentIndex - 1 : items.length - 1;
          (items[prevIndex] as HTMLElement).focus();
          break;
        case 'Enter':
          e.preventDefault();
          if (document.activeElement) {
            (document.activeElement as HTMLElement).click();
          }
          break;
      }
    });
  });
</script>

<style>
  /* Enhanced dropdown styling */
  #language-dropdown {
    box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1);
  }
  
  /* Custom focus styles for better accessibility */
  #language-menu-button:focus {
    outline: none;
    box-shadow: 0 0 0 2px rgba(255, 255, 255, 0.5);
  }
  
  [role="menuitem"]:focus {
    outline: none;
    background-color: rgb(243 244 246);
  }
  
  /* Smooth animation for dropdown arrow */
  #dropdown-arrow {
    transition: transform 0.2s ease-in-out;
  }
</style> 
</style> 